version: '3.8'

services:
  db:
    image: postgres:13-alpine
    container_name: postgres_container
    restart: always
    env_file: .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_network

  backend:
    image: backendsesi9:latest
    container_name: golang_backend
    restart: always
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=5432
    networks:
      - my_network

  frontend:
    image: frontendsesi9:latest
    container_name: nginx_frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "82:80"
    networks:
      - my_network

volumes:
  pg_data:

networks:
  my_network:
    driver: bridge
